// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebCar.Infrastructure.Data;

#nullable disable

namespace WebCar.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    partial class ApplicationDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebCar.Domain.Models.BodyType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BodyTypes");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("WebCar.Domain.Models.CarOptionalType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Optionals");
                });

            modelBuilder.Entity("WebCar.Domain.Models.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptTrade")
                        .HasColumnType("bit");

                    b.Property<int>("BodyType")
                        .HasColumnType("int")
                        .HasColumnName("BodyTypeId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FuelType")
                        .HasColumnType("int")
                        .HasColumnName("FuelTypeId");

                    b.Property<bool>("IPVA")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArmored")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLicensed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<long>("Kilometer")
                        .HasColumnType("bigint");

                    b.Property<string>("Localization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransmissionType")
                        .HasColumnType("int")
                        .HasColumnName("TransmissionTypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.Property<int>("YearOfModel")
                        .HasColumnType("int");

                    b.Property<Guid>("_versionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VersionId");

                    b.HasKey("Id");

                    b.HasIndex("BodyType");

                    b.HasIndex("FuelType");

                    b.HasIndex("TransmissionType");

                    b.HasIndex("UserId");

                    b.HasIndex("_versionId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("WebCar.Domain.Models.PostCarOptional", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CarOptionalType")
                        .HasColumnType("int")
                        .HasColumnName("CarOptionalTypeId");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarOptionalType");

                    b.HasIndex("PostId");

                    b.ToTable("PostOptionals");
                });

            modelBuilder.Entity("WebCar.Domain.Models.PostHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostHistories");
                });

            modelBuilder.Entity("WebCar.Domain.Models.TransmissionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TransmissionTypes");
                });

            modelBuilder.Entity("WebCar.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Version", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Image", b =>
                {
                    b.HasOne("WebCar.Domain.Models.Post", null)
                        .WithMany("Images")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Image_Post");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Model", b =>
                {
                    b.HasOne("WebCar.Domain.Models.Brand", null)
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Brand_Model");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Post", b =>
                {
                    b.HasOne("WebCar.Domain.Models.BodyType", null)
                        .WithMany()
                        .HasForeignKey("BodyType")
                        .IsRequired()
                        .HasConstraintName("FK_Post_BodyType");

                    b.HasOne("WebCar.Domain.Models.FuelType", null)
                        .WithMany()
                        .HasForeignKey("FuelType")
                        .IsRequired()
                        .HasConstraintName("FK_Post_FuelType");

                    b.HasOne("WebCar.Domain.Models.TransmissionType", null)
                        .WithMany()
                        .HasForeignKey("TransmissionType")
                        .IsRequired()
                        .HasConstraintName("FK_Post_TransmissionType");

                    b.HasOne("WebCar.Domain.Models.User", null)
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_Post");

                    b.HasOne("WebCar.Domain.Models.Version", "Version")
                        .WithMany()
                        .HasForeignKey("_versionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Post_Version");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WebCar.Domain.Models.PostCarOptional", b =>
                {
                    b.HasOne("WebCar.Domain.Models.CarOptionalType", null)
                        .WithMany()
                        .HasForeignKey("CarOptionalType")
                        .IsRequired()
                        .HasConstraintName("FK_PostCarOptional_CarOptionalType");

                    b.HasOne("WebCar.Domain.Models.Post", null)
                        .WithMany("Optionals")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostOptional_Post");
                });

            modelBuilder.Entity("WebCar.Domain.Models.PostHistory", b =>
                {
                    b.HasOne("WebCar.Domain.Models.Post", null)
                        .WithMany("Histories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostHistory_Post");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Version", b =>
                {
                    b.HasOne("WebCar.Domain.Models.Model", null)
                        .WithMany("Versions")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Model_Version");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Model", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Post", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Images");

                    b.Navigation("Optionals");
                });

            modelBuilder.Entity("WebCar.Domain.Models.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
