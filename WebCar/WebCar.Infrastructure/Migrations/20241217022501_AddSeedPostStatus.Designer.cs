// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebCar.Infrastructure.Data;

#nullable disable

namespace WebCar.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20241217022501_AddSeedPostStatus")]
    partial class AddSeedPostStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebCar.Domain.Models.BodyType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BodyType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 0,
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SUV"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pickup"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Convertible"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Minivan"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Van"
                        });
                });

            modelBuilder.Entity("WebCar.Domain.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BodyType")
                        .HasColumnType("int")
                        .HasColumnName("BodyTypeId");

                    b.Property<int>("ConditionType")
                        .HasColumnType("int")
                        .HasColumnName("ConditionTypeId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FuelType")
                        .HasColumnType("int")
                        .HasColumnName("FuelTypeId");

                    b.Property<bool>("IsArmored")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLicensed")
                        .HasColumnType("bit");

                    b.Property<long>("Kilometer")
                        .HasColumnType("bigint");

                    b.Property<int>("TransmissionType")
                        .HasColumnType("int")
                        .HasColumnName("TransmissionTypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.Property<int>("YearOfModel")
                        .HasColumnType("int");

                    b.Property<Guid>("_versionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VersionId");

                    b.HasKey("Id");

                    b.HasIndex("BodyType");

                    b.HasIndex("ConditionType");

                    b.HasIndex("FuelType");

                    b.HasIndex("TransmissionType");

                    b.HasIndex("_versionId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("WebCar.Domain.Models.CarConditionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ConditionType");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "New"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Used"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SemiNew"
                        });
                });

            modelBuilder.Entity("WebCar.Domain.Models.CarOptional", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CarOptionalType")
                        .HasColumnType("int")
                        .HasColumnName("CarOptionalTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CarOptionalType");

                    b.ToTable("CarOptionals");
                });

            modelBuilder.Entity("WebCar.Domain.Models.CarOptionalType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Optionals");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Power Steering"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Power Windows"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Power Locks"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Airbag"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ABS Brakes"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Leather Seats"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Parking Sensors"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Rear Camera"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sunroof"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Onboard Computer"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Stability Control"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Traction Control"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Fog Lights"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Alloy Wheels"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Cruise Control"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Rain Sensor"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Alarm System"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Multimedia System"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Multifunction Steering Wheel"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Power Mirrors"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Keyless Entry"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Hill Start Assist"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Isofix Anchors"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Xenon Headlights"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Heated Seats"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Speed Limiter"
                        });
                });

            modelBuilder.Entity("WebCar.Domain.Models.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FuelType");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Electric"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Flex"
                        },
                        new
                        {
                            Id = 0,
                            Name = "Gasoline"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hybrid"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Alcohol"
                        });
                });

            modelBuilder.Entity("WebCar.Domain.Models.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptTrade")
                        .HasColumnType("bit");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Localization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("PostStatusId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("WebCar.Domain.Models.PostHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostHistories");
                });

            modelBuilder.Entity("WebCar.Domain.Models.PostStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PostStatus");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Pendent"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sold"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("WebCar.Domain.Models.TransmissionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TransmissionType");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Manual"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Automatic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Semi-Automatic"
                        });
                });

            modelBuilder.Entity("WebCar.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Version", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Car", b =>
                {
                    b.HasOne("WebCar.Domain.Models.BodyType", null)
                        .WithMany()
                        .HasForeignKey("BodyType")
                        .IsRequired()
                        .HasConstraintName("FK_Post_BodyType");

                    b.HasOne("WebCar.Domain.Models.CarConditionType", null)
                        .WithMany()
                        .HasForeignKey("ConditionType")
                        .IsRequired()
                        .HasConstraintName("FK_Post_CarConditionType");

                    b.HasOne("WebCar.Domain.Models.FuelType", null)
                        .WithMany()
                        .HasForeignKey("FuelType")
                        .IsRequired()
                        .HasConstraintName("FK_Post_FuelType");

                    b.HasOne("WebCar.Domain.Models.TransmissionType", null)
                        .WithMany()
                        .HasForeignKey("TransmissionType")
                        .IsRequired()
                        .HasConstraintName("FK_Post_TransmissionType");

                    b.HasOne("WebCar.Domain.Models.Version", "Version")
                        .WithMany()
                        .HasForeignKey("_versionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Post_Version");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WebCar.Domain.Models.CarOptional", b =>
                {
                    b.HasOne("WebCar.Domain.Models.Car", null)
                        .WithMany("Optionals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CarOptional_Car");

                    b.HasOne("WebCar.Domain.Models.CarOptionalType", null)
                        .WithMany()
                        .HasForeignKey("CarOptionalType")
                        .IsRequired()
                        .HasConstraintName("FK_CarOptional_CarOptionalType");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Model", b =>
                {
                    b.HasOne("WebCar.Domain.Models.Brand", null)
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Brand_Model");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Post", b =>
                {
                    b.HasOne("WebCar.Domain.Models.Car", "Car")
                        .WithOne()
                        .HasForeignKey("WebCar.Domain.Models.Post", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Post_Car");

                    b.HasOne("WebCar.Domain.Models.PostStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .IsRequired()
                        .HasConstraintName("FK_Post_PostStatus");

                    b.OwnsMany("WebCar.Domain.Models.PostStorage", "Images", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Filename")
                                .IsRequired()
                                .HasMaxLength(256)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<Guid>("ScannedFileId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PostId", "Id");

                            b1.ToTable("PostStorage");

                            b1.WithOwner()
                                .HasForeignKey("PostId");
                        });

                    b.Navigation("Car");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("WebCar.Domain.Models.PostHistory", b =>
                {
                    b.HasOne("WebCar.Domain.Models.Post", null)
                        .WithMany("Histories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostHistory_Post");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Version", b =>
                {
                    b.HasOne("WebCar.Domain.Models.Model", null)
                        .WithMany("Versions")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Model_Version");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Car", b =>
                {
                    b.Navigation("Optionals");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Model", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("WebCar.Domain.Models.Post", b =>
                {
                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
